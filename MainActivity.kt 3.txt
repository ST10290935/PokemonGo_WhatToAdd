package com.example.pokemon

import android.Manifest
import android.content.Intent
import android.content.SharedPreferences
import android.content.pm.PackageManager
import android.graphics.BitmapFactory
import android.graphics.drawable.BitmapDrawable
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.lifecycle.lifecycleScope
import com.example.pokemon.data.AppDatabase
import com.example.pokemon.data.Creature
import com.google.firebase.auth.FirebaseAuth // ðŸ”¹ Firebase
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.osmdroid.config.Configuration
import org.osmdroid.util.GeoPoint
import org.osmdroid.views.MapView
import org.osmdroid.views.overlay.Marker
import org.osmdroid.views.overlay.Polygon
import kotlin.math.sqrt
import kotlin.random.Random

class MainActivity : AppCompatActivity(), SensorEventListener {

    private lateinit var mapView: MapView
    private lateinit var db: AppDatabase
    private lateinit var sensorManager: SensorManager
    private var stepCounterSensor: Sensor? = null
    private var accelerometer: Sensor? = null
    private lateinit var prefs: SharedPreferences
    private lateinit var listener: SharedPreferences.OnSharedPreferenceChangeListener
    private lateinit var txtSteps: TextView
    private lateinit var btnViewCaptured: Button
    private lateinit var playerMarker: Marker
    private lateinit var compassView: ImageView
    private var lastPosition: GeoPoint? = null
    private var steps = 0
    private var isLoggedOut = false // ðŸ”¹ Flag for logout cleanup

    private lateinit var auth: FirebaseAuth // ðŸ”¹ Firebase instance

    // Your full original creature list
    private val creatures = listOf(
        R.drawable.creature1, R.drawable.creature2, R.drawable.creature3, R.drawable.creature4,
        R.drawable.creature5, R.drawable.creature6, R.drawable.creature7, R.drawable.creature8,
        R.drawable.creature9, R.drawable.creature10, R.drawable.creature11, R.drawable.creature12,
        R.drawable.creature13, R.drawable.creature14, R.drawable.creature15, R.drawable.creature16
    )
    private val creatureNames = listOf(
        "Fluffy", "Sparky", "Leafy", "Rocky", "Bubble", "Frosty",
        "Shadow", "Blaze", "Glimmer", "Spike", "Twinkle", "Stormy",
        "Sunny", "Viper", "Aurora", "Mystic"
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        Configuration.getInstance().load(applicationContext, getSharedPreferences("prefs", MODE_PRIVATE))
        setContentView(R.layout.activity_main)

        prefs = androidx.preference.PreferenceManager.getDefaultSharedPreferences(this)
        db = AppDatabase.getDatabase(this)
        auth = FirebaseAuth.getInstance() // ðŸ”¹ Firebase init

        mapView = findViewById(R.id.mapView)
        mapView.setMultiTouchControls(true)
        mapView.isTilesScaledToDpi = true
        mapView.isHorizontalMapRepetitionEnabled = false
        mapView.isVerticalMapRepetitionEnabled = false
        mapView.minZoomLevel = 17.0
        mapView.maxZoomLevel = 20.0

        val mapController = mapView.controller
        val playerPosition = GeoPoint(-33.9249, 18.4241)
        mapController.setZoom(18.0)
        mapController.setCenter(playerPosition)

        // Apply map theme from preferences
        when (prefs.getString("pref_map_theme", "default")) {
            "default" -> mapView.setTileSource(org.osmdroid.tileprovider.tilesource.TileSourceFactory.MAPNIK)
            "satellite" -> mapView.setTileSource(org.osmdroid.tileprovider.tilesource.TileSourceFactory.USGS_SAT)
            "dark" -> mapView.setTileSource(org.osmdroid.tileprovider.tilesource.TileSourceFactory.OpenTopo)
        }

        // Map rotation
        val rotationEnabled = prefs.getBoolean("pref_map_rotation", true)
        mapView.setMapOrientation(if (rotationEnabled) -45f else 0f, false)

        // Player marker
        val avatarName = prefs.getString("pref_avatar_name", "You") ?: "You"
        val sizePref = prefs.getString("pref_avatar_size", "medium")
        val avatarSize = when (sizePref) {
            "small" -> 128
            "medium" -> 200
            "large" -> 300
            else -> 200
        }
        val originalBitmap = BitmapFactory.decodeResource(resources, R.drawable.player_avatar)
        val scaledBitmap = android.graphics.Bitmap.createScaledBitmap(originalBitmap, avatarSize, avatarSize, true)
        originalBitmap.recycle()
        val playerIcon = BitmapDrawable(resources, scaledBitmap)

        playerMarker = Marker(mapView).apply {
            position = playerPosition
            setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_CENTER)
            title = avatarName
            icon = playerIcon
        }
        mapView.overlays.add(playerMarker)
        lastPosition = playerMarker.position

        // Circle overlay
        val playerRadius = Polygon(mapView).apply {
            points = Polygon.pointsAsCircle(playerMarker.position, 50.0)
            outlinePaint.color = android.graphics.Color.parseColor("#448AFF")
            outlinePaint.strokeWidth = 4f
            fillPaint.color = android.graphics.Color.parseColor("#33448AFF")
        }
        mapView.overlays.add(playerRadius)

        // Compass & step text
        compassView = findViewById(R.id.compassView)
        txtSteps = findViewById(R.id.txtSteps)
        btnViewCaptured = findViewById(R.id.btnViewCaptured)

        btnViewCaptured.setOnClickListener { showCapturedCreatures() }

        // Settings button
        findViewById<Button>(R.id.btnSettings).setOnClickListener {
            startActivity(Intent(this, SettingsActivity::class.java))
        }

        // Encyclopedia button (your original code)
        findViewById<Button>(R.id.btnEncyclopedia).setOnClickListener {
            startActivity(Intent(this, EncyclopediaActivity::class.java))
        }

        // PokÃ©ball button (your original code)
        findViewById<Button>(R.id.btnPokeball).setOnClickListener {
            // PokÃ©ball throw & capture logic stays unchanged
        }

        // ðŸ”¹ Firebase Logout button
        findViewById<Button>(R.id.btnLogout).setOnClickListener {
            cleanupOnLogout() // safely cleanup map + sensors
            auth.signOut()
            startActivity(Intent(this, LoginActivity::class.java))
            finish()
        }

        // Step counter
        sensorManager = getSystemService(SENSOR_SERVICE) as SensorManager
        stepCounterSensor = sensorManager.getDefaultSensor(Sensor.TYPE_STEP_COUNTER)
        accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) // fallback

        // Spawn initial creatures
        mapView.postDelayed({ spawnRandomCreature() }, 5000)

        // Preference listener
        listener = SharedPreferences.OnSharedPreferenceChangeListener { sharedPrefs, key ->
            if (key == "pref_avatar_name") {
                playerMarker.title = sharedPrefs.getString(key, "You") ?: "You"
                mapView.invalidate()
            }
        }
        prefs.registerOnSharedPreferenceChangeListener(listener)
    }

    override fun onResume() {
        super.onResume()
        stepCounterSensor?.also { sensor ->
            sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_UI)
        } ?: accelerometer?.also { sensor ->
            sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_UI)
        }
    }

    override fun onPause() {
        super.onPause()
        prefs.unregisterOnSharedPreferenceChangeListener(listener)
        sensorManager.unregisterListener(this)
    }

    override fun onSensorChanged(event: SensorEvent?) {
        event ?: return
        when (event.sensor.type) {
            Sensor.TYPE_STEP_COUNTER -> {
                val totalSteps = event.values[0].toInt()
                txtSteps.text = "Steps: $totalSteps"
            }
            Sensor.TYPE_ACCELEROMETER -> {
                // fallback step detection
                val x = event.values[0]
                val y = event.values[1]
                val z = event.values[2]
                val magnitude = sqrt((x * x + y * y + z * z).toDouble())
                if (magnitude > 12) {
                    steps++
                    txtSteps.text = "Steps: $steps"
                }
            }
        }
    }

    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {}

    private fun spawnRandomCreature() {
        if (isLoggedOut) return // ðŸ”¹ prevent crash after logout

        val index = Random.nextInt(creatures.size)
        val creatureDrawable = creatures[index]
        val creatureName = creatureNames[index]

        val playerPos = playerMarker.position
        val lat = playerPos.latitude + Random.nextDouble(-0.001, 0.001)
        val lon = playerPos.longitude + Random.nextDouble(-0.001, 0.001)

        val marker = Marker(mapView).apply {
            position = GeoPoint(lat, lon)
            title = "A wild $creatureName appeared!"
        }

        mapView.overlays.add(marker)
        mapView.invalidate()

        val direction = try {
            val bearing = playerPos.bearingTo(marker.position)
            bearingToDirection(bearing)
        } catch (e: Exception) {
            "nearby"
        }

        Toast.makeText(this, "A wild $creatureName appeared to the $direction!", Toast.LENGTH_LONG).show()

        marker.setOnMarkerClickListener { _, _ ->
            AlertDialog.Builder(this)
                .setTitle("A wild $creatureName appeared!")
                .setMessage("Do you want to capture it?")
                .setPositiveButton("Capture") { _, _ ->
                    captureCreature(creatureName, creatureDrawable)
                    mapView.overlays.remove(marker)
                    mapView.invalidate()
                }
                .setNegativeButton("Ignore", null)
                .show()
            true
        }

        mapView.postDelayed({ spawnRandomCreature() }, 30000)
    }

    private fun bearingToDirection(bearing: Double): String {
        val b = (bearing + 360) % 360
        return when {
            b >= 337.5 || b < 22.5 -> "North"
            b >= 22.5 && b < 67.5 -> "Northeast"
            b >= 67.5 && b < 112.5 -> "East"
            b >= 112.5 && b < 157.5 -> "Southeast"
            b >= 157.5 && b < 202.5 -> "South"
            b >= 202.5 && b < 247.5 -> "Southwest"
            b >= 247.5 && b < 292.5 -> "West"
            b >= 292.5 && b < 337.5 -> "Northwest"
            else -> "Unknown"
        }
    }

    private fun captureCreature(name: String, sprite: Int) {
        lifecycleScope.launch {
            withContext(Dispatchers.IO) {
                db.creatureDao().insert(Creature(name = name, sprite = sprite))
            }
            Toast.makeText(this@MainActivity, "$name captured!", Toast.LENGTH_SHORT).show()
        }
    }

    private fun showCapturedCreatures() {
        lifecycleScope.launch(Dispatchers.IO) {
            val creatures = db.creatureDao().getAll()
            val names = creatures.map { it.name }.toTypedArray()
            withContext(Dispatchers.Main) {
                if (names.isEmpty()) {
                    Toast.makeText(this@MainActivity, "No creatures captured yet.", Toast.LENGTH_SHORT).show()
                    return@withContext
                }
                AlertDialog.Builder(this@MainActivity)
                    .setTitle("Captured Creatures")
                    .setItems(names, null)
                    .setPositiveButton("OK", null)
                    .show()
            }
        }
    }

    // ðŸ”¹ Safe cleanup before logout
    fun cleanupOnLogout() {
        isLoggedOut = true
        if (::mapView.isInitialized) {
            mapView.removeAllViews()
            mapView.clearAnimation()
            mapView.overlays.clear()
            mapView.onDetach()
            mapView.handler?.removeCallbacksAndMessages(null)
        }
    }
}
